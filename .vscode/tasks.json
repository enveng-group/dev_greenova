{
  "tasks": [
    {
      "args": [
        "-c",
        "autopep8 --in-place --aggressive --aggressive \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Format with autopep8",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "isort \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Sort imports with isort",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "pylint \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Lint with pylint",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 5,
          "regexp": "^(.+):(\\d+):(\\d+):\\s+(warning|error|fatal):\\s+(.*)$",
          "severity": 4
        }
      },
      "type": "shell"
    },
    {
      "args": ["-c", "mypy \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Type check with mypy",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "file": 1,
          "line": 2,
          "message": 4,
          "regexp": "^(.+):(\\d+):\\s+(error|note):\\s+(.*)$",
          "severity": 3
        }
      },
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "mypy --ignore-missing-imports --disallow-untyped-defs --no-implicit-optional \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Type check with mypy (standard)",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "file": 1,
          "line": 2,
          "message": 4,
          "regexp": "^(.+):(\\d+):\\s+(error|note):\\s+(.*)$",
          "severity": 3
        }
      },
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "mypy --config-file \"${workspaceFolder}/mypy.ini\" \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Type check with mypy (Django)",
      "options": {
        "env": {
          "PYTHONPATH": "/workspaces/greenova"
        }
      },
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "file": 1,
          "line": 2,
          "message": 4,
          "regexp": "^(.+):(\\d+):\\s+(error|note):\\s+(.*)$",
          "severity": 3
        }
      },
      "type": "shell"
    },
    {
      "args": ["-c", "bandit -r \"${file}\" --skip B101"],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Security check with bandit",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "dependsOn": [
        "Python: Sort imports with isort",
        "Python: Format with autopep8",
        "Python: Lint with pylint",
        "Python: Type check with mypy (standard)",
        "Python: Security check with bandit"
      ],
      "dependsOrder": "sequence",
      "group": "none",
      "label": "Python: Fix all",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": []
    },
    {
      "args": [
        "-c",
        "pylint --rcfile=\"${workspaceFolder}/.pylintrc\" \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Lint with pylint (standard)",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 5,
          "regexp": "^(.+):(\\d+):(\\d+):\\s+(warning|error|fatal):\\s+(.*)$",
          "severity": 4
        }
      },
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "pylint --rcfile=\"${workspaceFolder}/.pylintrc-django\" --load-plugins=pylint_django \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Lint with pylint (Django)",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 5,
          "regexp": "^(.+):(\\d+):(\\d+):\\s+(warning|error|fatal):\\s+(.*)$",
          "severity": 4
        }
      },
      "type": "shell"
    },
    {
      "dependsOn": [
        "Python: Sort imports with isort",
        "Python: Format with autopep8",
        "Python: Lint with pylint (standard)",
        "Python: Type check with mypy (standard)"
      ],
      "dependsOrder": "sequence",
      "group": "none",
      "label": "Python: Fix all (standard)",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": []
    },
    {
      "dependsOn": [
        "Python: Sort imports with isort",
        "Python: Format with autopep8",
        "Python: Lint with pylint (Django)",
        "Python: Type check with mypy (Django)",
        "Python: Security check with bandit"
      ],
      "dependsOrder": "sequence",
      "group": "none",
      "label": "Python: Fix all (Django)",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": []
    },
    {
      "args": [
        "-c",
        "mypy --no-config --ignore-missing-imports --disallow-untyped-defs --no-implicit-optional \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Type check with mypy (config files)",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "python",
        "pattern": {
          "file": 1,
          "line": 2,
          "message": 4,
          "regexp": "^(.+):(\\d+):\\s+(error|note):\\s+(.*)$",
          "severity": 3
        }
      },
      "type": "shell"
    },
    {
      "args": ["-c", "djlint \"${file}\" --reformat"],
      "command": "/bin/sh",
      "group": "none",
      "label": "HTML: Format with djlint",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "djlint \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "HTML: Lint with djlint",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "djlint",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 5,
          "regexp": "^(.+):(\\d+):(\\d+):\\s+(\\w+)\\s+(.+)$",
          "severity": 4
        }
      },
      "type": "shell"
    },
    {
      "args": ["-c", "npx prettier --write \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "JavaScript: Format with prettier",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "npx eslint \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "JavaScript: Lint with eslint",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": ["$eslint-stylish"],
      "type": "shell"
    },
    {
      "args": ["-c", "npx eslint --fix \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "JavaScript: Fix eslint issues",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": ["$eslint-stylish"],
      "type": "shell"
    },
    {
      "dependsOn": [
        "JavaScript: Format with prettier",
        "JavaScript: Fix eslint issues"
      ],
      "dependsOrder": "sequence",
      "group": "none",
      "label": "JavaScript: Fix all",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": []
    },
    {
      "args": ["-c", "npx prettier --write \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "CSS: Format with prettier",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "npx stylelint \"${file}\" --config \"${workspaceFolder}/stylelint.config.js\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "CSS: Lint with stylelint",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "stylelint",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 5,
          "regexp": "^([^:]+):(\\d+):(\\d+):\\s+(.+)\\s+(.+)$",
          "severity": 4
        }
      },
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "npx stylelint \"${file}\" --config \"${workspaceFolder}/stylelint.config.js\" --fix"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "CSS: Fix stylelint issues",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "dependsOn": ["CSS: Format with prettier", "CSS: Fix stylelint issues"],
      "dependsOrder": "sequence",
      "group": "none",
      "label": "CSS: Fix all",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": []
    },
    {
      "args": ["-c", "npx prettier --write \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "JSON: Format with prettier",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "npx prettier --config \"${workspaceFolder}/.prettierrc\" --write \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "YAML: Format with prettier",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "npx prettier --write \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "Markdown: Format with prettier",
      "presentation": {
        "clear": true,
        "panel": "shared",
        "reveal": "silent"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "/usr/local/share/nvm/current/bin/markdownlint-cli2 \"${file}\""
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Markdown: Lint with markdownlint",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "markdownlint",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 4,
          "regexp": "^(.+?):(\\d+)(?::(\\d+))? (.+)$"
        }
      },
      "type": "shell"
    },
    {
      "dependsOn": [
        "Markdown: Format with prettier",
        "Markdown: Lint with markdownlint"
      ],
      "dependsOrder": "sequence",
      "group": "none",
      "label": "Markdown: Fix all",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": []
    },
    {
      "args": ["-c", "shellcheck \"${file}\""],
      "command": "/bin/sh",
      "group": "none",
      "label": "Shell: Check with shellcheck",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": {
        "fileLocation": ["relative", "${workspaceFolder}"],
        "owner": "shellcheck",
        "pattern": {
          "column": 3,
          "file": 1,
          "line": 2,
          "message": 5,
          "regexp": "^(.+):(\\d+):(\\d+):\\s+(note|warning|error|style):\\s+(.*)$",
          "severity": 4
        }
      },
      "type": "shell"
    },
    {
      "args": ["-c", "${command:workbench.action.terminal.clear}"],
      "command": "/bin/sh",
      "group": {
        "isDefault": true,
        "kind": "build"
      },
      "label": "Format current file",
      "linux": {
        "args": ["-c", "clear"],
        "command": "/bin/sh"
      },
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell",
      "windows": {
        "args": ["/c", "cls"],
        "command": "cmd.exe"
      }
    },
    {
      "args": [
        "-c",
        "if [ -n \"$(echo \"${file}\" | grep '\\\\.py$')\" ]; then autopep8 --in-place \"${file}\" && isort \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\\\.html$')\" ]; then djlint \"${file}\" --reformat; elif [ -n \"$(echo \"${file}\" | grep '\\\\.(js\\\\|css\\\\|json\\\\|md\\\\|yaml\\\\|yml\\\\|toml)$')\" ]; then npx prettier --write \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\\\.sh$')\" ]; then echo \"Shell files can't be formatted automatically, running shellcheck...\"; shellcheck \"${file}\"; fi"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Auto-detect and format file",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "if [ -n \"$(echo \"${file}\" | grep '/greenova/.*\\.py$')\" ]; then pylint --rcfile=${workspaceFolder}/.pylintrc-django --load-plugins=tools.pylint.fix_good_names,pylint_django,tools.pylint.gevent_checker \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.py$')\" ]; then pylint --rcfile=${workspaceFolder}/.pylintrc \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.html$')\" ]; then djlint \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.js$')\" ]; then npx eslint \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.md$')\" ]; then /usr/local/share/nvm/current/bin/markdownlint-cli2 \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.sh$')\" ]; then shellcheck \"${file}\"; fi"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Auto-detect and lint file",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "if [ -n \"$(echo \"${file}\" | grep '/greenova/.*\\.py$')\" ]; then isort \"${file}\" && autopep8 --in-place \"${file}\" && pylint --rcfile=${workspaceFolder}/.pylintrc-django --load-plugins=pylint_django \"${file}\" && mypy --config-file ${workspaceFolder}/mypy.ini \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\(setup\\.py\\|pyproject\\.toml\\|\\.pylintrc\\)')\" ]; then isort \"${file}\" && autopep8 --in-place \"${file}\" && pylint --rcfile=${workspaceFolder}/.pylintrc \"${file}\" && mypy --no-config --ignore-missing-imports \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.py$')\" ]; then isort \"${file}\" && autopep8 --in-place \"${file}\" && pylint --rcfile=${workspaceFolder}/.pylintrc \"${file}\" && mypy --ignore-missing-imports --disallow-untyped-defs \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.html$')\" ]; then djlint \"${file}\" --reformat; elif [ -n \"$(echo \"${file}\" | grep '\\.js$')\" ]; then npx prettier --write \"${file}\" && npx eslint --fix \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.md$')\" ]; then npx prettier --write \"${file}\" && /usr/local/share/nvm/current/bin/markdownlint-cli2 \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.(css\\|json\\|yaml\\|yml\\|toml)$')\" ]; then npx prettier --write \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.css$')\" ]; then npx stylelint --config \"${workspaceFolder}/stylelint.config.js\" --fix \"${file}\"; elif [ -n \"$(echo \"${file}\" | grep '\\.sh$')\" ]; then shellcheck \"${file}\"; fi"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Auto-detect and fix all issues",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "find . -type d -name \"__pycache__\" -exec rm -rf {} \\; 2>/dev/null || true && find . -name \"*.pyc\" -delete"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Python: Clean cache files",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "cd greenova && python3 manage.py makemigrations chatbot company users mechanisms obligations projects responsibility procedures feedback"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Create migrations",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "cd greenova && python3 manage.py migrate"],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Apply migrations",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "cd greenova && python3 manage.py collectstatic --clear --noinput"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Collect static files",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "cd greenova && python3 manage.py import_obligations dummy_data.csv"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Import obligations",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "cd greenova && python3 manage.py sync_mechanisms"],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Sync mechanisms",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "cd greenova && python3 manage.py createsuperuser"],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Create superuser",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "dependsOn": ["Django: Run Tailwind", "Django: Run server"],
      "dependsOrder": "parallel",
      "group": "none",
      "label": "Django: Development environment",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": [
        "-c",
        "cd greenova/theme/static_src/src && npm install && cd ../../.. && python3 manage.py tailwind check-updates && python3 manage.py tailwind update && python3 manage.py tailwind install && python3 manage.py tailwind build"
      ],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Build and install Tailwind",
      "presentation": {
        "panel": "dedicated",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "cd greenova && python3 manage.py runserver"],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Run server",
      "presentation": {
        "panel": "dedicated",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "cd greenova && python3 manage.py check"],
      "command": "/bin/sh",
      "group": "none",
      "label": "Django: Check",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    },
    {
      "args": ["-c", "npx protolint lint --fix ."],
      "command": "/bin/sh",
      "group": "none",
      "label": "Protolint: Lint with protolint",
      "presentation": {
        "panel": "shared",
        "reveal": "always"
      },
      "problemMatcher": [],
      "type": "shell"
    }
  ],
  "version": "2.0.0"
}
