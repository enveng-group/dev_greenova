# Pylint Workflow
# This workflow runs Pylint to analyze Python code for style and quality issues.
# For more information, see:
# https://pylint.pycqa.org/en/latest/

name: Pylint

on:
  push:
    branches:
      - 'main' # Run on pushes to the main branch
    paths:
      - '**.py' # Trigger on changes to Python files
      - 'requirements/requirements.txt' # Trigger on changes to requirements
      - 'requirements/constraints.txt' # Trigger on changes to constraints
      - '.pylintrc' # Trigger on changes to Pylint configuration
      - '.pylintrc-django' # Trigger on changes to Django-specific Pylint configuration
  pull_request:
    branches:
      - 'main' # Run on pull requests targeting the main branch
    paths:
      - '**.py' # Trigger on changes to Python files
      - 'requirements/requirements.txt' # Trigger on changes to requirements
      - 'requirements/constraints.txt' # Trigger on changes to constraints
      - '.pylintrc' # Trigger on changes to Pylint configuration
      - '.pylintrc-django' # Trigger on changes to Django-specific Pylint configuration
  workflow_dispatch: # Allow manual triggering of the workflow

permissions:
  contents: read # Minimal permissions required for this workflow

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    permissions:
      contents: read # Explicitly set minimal permissions for the job
    strategy:
      matrix:
        python-version: ['3.12'] # Test against Python 3.12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Check out the repository code

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4 # Set up the specified Python version
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Cache pip dependencies

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip # Upgrade pip
          pip install -r requirements/requirements.txt
          pip install pylint pylint-django # Install Pylint and Pylint-Django plugin

      - name: Create .env file for CI
        run: |
          echo "DJANGO_SETTINGS_MODULE=greenova.settings" > .env # Set Django settings module
          echo "DJANGO_SECRET_KEY=django-insecure-ci-test-key" >> .env # Set a test secret key
          echo "DJANGO_DEBUG=True" >> .env # Enable debug mode for CI
          echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,testserver" >> .env # Set allowed hosts

      - name: Set up environment for pylint
        run: |
          mkdir -p greenova # Create the settings directory
          export PYTHONPATH=$PYTHONPATH:$(pwd) # Add the current directory to PYTHONPATH
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV # Persist PYTHONPATH
          echo "DJANGO_SETTINGS_MODULE=greenova.settings" >> $GITHUB_ENV # Persist Django settings module

      - name: Analyze the code with pylint
        run: |
          pylint --rcfile=.pylintrc-django --load-plugins=pylint_django greenova/*/ # Run Pylint with the specified configuration and plugins
